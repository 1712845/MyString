#ifndef __MYSTRING_H__
#define __MYSTRING_H__
#include"Iterator.h"
class MyString
{
private:
	char* str;
	int Size;
public:
	friend class Iterator;
	typedef Iterator iterator;
	typedef ReverseIterator reverse_iterator;
	MyString();
	MyString(const char*);
	~MyString();
	int length();
	operator const char*() const;
	int size();
	char* GetString();
	MyString(const MyString&);
	bool Empty();
	MyString(int);
	MyString& operator = (const MyString&);
	MyString& operator+(const MyString& src);
	MyString& operator+(const char c);
	MyString& operator+(const char* src);
	MyString& operator+=(const MyString&);
	MyString& operator+=(const char*src);
	MyString& operator+=(const char c);
	friend ostream& operator << (ostream& outdev,const MyString &);
	friend istream& operator >>(istream& indev, MyString&);
	friend bool operator < (const MyString&, const MyString &);
	friend bool operator <= (const MyString &, const MyString &);
	friend bool operator == (const MyString &, const MyString &);
	friend bool operator !=(const MyString &, const MyString &);
	friend bool operator > (const MyString &, const MyString &);
	friend bool operator >=(const MyString &, const MyString &);
	char& operator[] (unsigned int);
	MyString& insert(int index, const MyString&);
	MyString& insert(int pos, const MyString&src, int subpos, int length);
	MyString& insert(int pos, const char* src);
	MyString& insert(int pos, const char* src,int n);
	MyString& insert(int pos, int n,char c);
	iterator insert(iterator p, char c);
	void insert(iterator p, iterator first, iterator last);
	void insert(iterator p, int n, char c);
	MyString& clear();
	long long  int max_size();
	int capacity();
	MyString& resize(int n, char c = 0);
	void swap(MyString& src);
	char& at(int pos);
	const char& at(int pos) const;
	char& back();
	const char& back() const;
	const char& front() const;
	char& front();
	MyString& append(const MyString& src);
	MyString& append(const MyString& src, int pos, int length);
	MyString& append(const char* src);
	MyString& append(const char* src, int n);
	MyString& append(int n, char c);
	MyString& append(iterator first, iterator last);
	void push_back(char c);
	void pop_back();
	friend istream& getline(istream& indev, MyString& src);
	friend istream& getline(istream& indev, MyString& src,char c);
	char* c_str();
	const char* data();
	void copy(char*& src, int length, int pos);
	MyString& assign(const MyString& src);
	MyString& assign(const MyString& src, int pos, int length);
	MyString& assign(const char* src);
	MyString& assign(const char* src, int n);
	MyString& assign(int n, char c);
	MyString& assign(iterator first, iterator last);
	MyString& erase(int pos, int length);
	MyString& replace(int pos, int length, const MyString &src);
	MyString& replace(int pos, int length, const MyString &src, int subpos, int sublength);
	MyString& replace(int pos, int length, const char*src);
	MyString& replace(int pos, int length, const char* src, int n);
	MyString& replace(int pos, int length, int n, char c);
	MyString& replace(iterator i1, iterator i2, const MyString& src);
	MyString& replace(iterator i1, iterator i2, const char* src);
	MyString& replace(iterator i1, iterator i2, const char* src,int n);
	MyString& replace(iterator i1, iterator i2, int n,char c);
	MyString& replace(iterator i1, iterator i2, iterator first, iterator last);
	MyString& replace(iterator i1, iterator i2, reverse_iterator first,reverse_iterator last);
	const int find(const MyString& src);
	const int find(const char* src);
	const int find(const char* src, int pos, int n);
	const int find(char c);
	const int rfind(const MyString& src);
	const int rfind(const char* src);
	const int rfind(const char* src, int pos, int n);
	const int rfind(char c);
	MyString& substr(int pos, int length);
	const int compare(const MyString& src);
	const int compare(int pos, int length, const MyString& src);
	const int compare(int pos, int length, const MyString& src, int subpos, int sublength);
	const int compare(const char* src);
	const int compare(int pos, int length, const char* src);
	const int compare(int pos, int length, const char* src, int n);
	const int find_first_of(const MyString& str); 
	const int find_first_of(const char* src);
	const int find_first_of(const char* src,int pos,int n);
	const int find_first_of(char c,int pos);
	const int find_last_of(const MyString& src);
	const int find_last_of(const char* src);
	const int find_last_of(const char* src,int pos,int n);
	const int find_last_of(char c);
	const int find_first_not_of(const MyString& src);
	const int find_first_not_of(const char* src);
	const int find_first_not_of(const char* src, int pos, int n);
	const int find_first_not_of(char c);
	const int find_last_not_of(const MyString& src);
	const int find_last_not_of(const char* src);
	const int find_last_not_of(const char* src,int pos,int n);
	const int find_last_not_of(char c);
	iterator begin();
	iterator end();
	reverse_iterator rbegin();
	reverse_iterator rend();
	const iterator cbegin();
	const iterator cend();
	const reverse_iterator crbegin();
	const reverse_iterator crend();
	MyString& erase(iterator p);
	MyString& erase(iterator first, iterator last);
};
#endif

